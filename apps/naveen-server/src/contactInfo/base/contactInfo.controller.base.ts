/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ContactInfoService } from "../contactInfo.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ContactInfoCreateInput } from "./ContactInfoCreateInput";
import { ContactInfo } from "./ContactInfo";
import { ContactInfoFindManyArgs } from "./ContactInfoFindManyArgs";
import { ContactInfoWhereUniqueInput } from "./ContactInfoWhereUniqueInput";
import { ContactInfoUpdateInput } from "./ContactInfoUpdateInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ContactInfoControllerBase {
  constructor(
    protected readonly service: ContactInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ContactInfo })
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createContactInfo(
    @common.Body() data: ContactInfoCreateInput
  ): Promise<ContactInfo> {
    return await this.service.createContactInfo({
      data: data,
      select: {
        createdAt: true,
        email: true,
        id: true,
        linkedIn: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ContactInfo] })
  @ApiNestedQuery(ContactInfoFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contactInfos(@common.Req() request: Request): Promise<ContactInfo[]> {
    const args = plainToClass(ContactInfoFindManyArgs, request.query);
    return this.service.contactInfos({
      ...args,
      select: {
        createdAt: true,
        email: true,
        id: true,
        linkedIn: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ContactInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async contactInfo(
    @common.Param() params: ContactInfoWhereUniqueInput
  ): Promise<ContactInfo | null> {
    const result = await this.service.contactInfo({
      where: params,
      select: {
        createdAt: true,
        email: true,
        id: true,
        linkedIn: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ContactInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateContactInfo(
    @common.Param() params: ContactInfoWhereUniqueInput,
    @common.Body() data: ContactInfoUpdateInput
  ): Promise<ContactInfo | null> {
    try {
      return await this.service.updateContactInfo({
        where: params,
        data: data,
        select: {
          createdAt: true,
          email: true,
          id: true,
          linkedIn: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ContactInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteContactInfo(
    @common.Param() params: ContactInfoWhereUniqueInput
  ): Promise<ContactInfo | null> {
    try {
      return await this.service.deleteContactInfo({
        where: params,
        select: {
          createdAt: true,
          email: true,
          id: true,
          linkedIn: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/fetch-contact-info")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FetchContactInfo(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.FetchContactInfo(body);
  }
}
