/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { ContactInfo } from "./ContactInfo";
import { ContactInfoCountArgs } from "./ContactInfoCountArgs";
import { ContactInfoFindManyArgs } from "./ContactInfoFindManyArgs";
import { ContactInfoFindUniqueArgs } from "./ContactInfoFindUniqueArgs";
import { CreateContactInfoArgs } from "./CreateContactInfoArgs";
import { UpdateContactInfoArgs } from "./UpdateContactInfoArgs";
import { DeleteContactInfoArgs } from "./DeleteContactInfoArgs";
import { ContactInfoService } from "../contactInfo.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ContactInfo)
export class ContactInfoResolverBase {
  constructor(
    protected readonly service: ContactInfoService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "read",
    possession: "any",
  })
  async _contactInfosMeta(
    @graphql.Args() args: ContactInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ContactInfo])
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "read",
    possession: "any",
  })
  async contactInfos(
    @graphql.Args() args: ContactInfoFindManyArgs
  ): Promise<ContactInfo[]> {
    return this.service.contactInfos(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ContactInfo, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "read",
    possession: "own",
  })
  async contactInfo(
    @graphql.Args() args: ContactInfoFindUniqueArgs
  ): Promise<ContactInfo | null> {
    const result = await this.service.contactInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactInfo)
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "create",
    possession: "any",
  })
  async createContactInfo(
    @graphql.Args() args: CreateContactInfoArgs
  ): Promise<ContactInfo> {
    return await this.service.createContactInfo({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => ContactInfo)
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "update",
    possession: "any",
  })
  async updateContactInfo(
    @graphql.Args() args: UpdateContactInfoArgs
  ): Promise<ContactInfo | null> {
    try {
      return await this.service.updateContactInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ContactInfo)
  @nestAccessControl.UseRoles({
    resource: "ContactInfo",
    action: "delete",
    possession: "any",
  })
  async deleteContactInfo(
    @graphql.Args() args: DeleteContactInfoArgs
  ): Promise<ContactInfo | null> {
    try {
      return await this.service.deleteContactInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async FetchContactInfo(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.FetchContactInfo(args);
  }
}
